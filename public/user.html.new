<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard - Digital Library</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <div class="user-container">
        <div class="user-header">
            <h1>Welcome to Your Library</h1>
            <p>Search, manage, and borrow books with ease.</p>
            <button id="logoutButton" class="btn" onclick="logout()" style="margin-top: 15px;">Logout</button>
        </div>
        <div class="tabs">
            <div class="tab active" onclick="switchTab('search', event)">üîç Search Books</div>
            <div class="tab" onclick="switchTab('library', event)">üìñ My Library</div>
            <div class="tab" onclick="switchTab('borrowed', event)">üìã Borrowed Books</div>
        </div>
        <div class="content-section">
            <div id="searchTab">
                <div class="search-container">
                    <input type="text" id="searchInput" class="search-input" placeholder="Search for books by title, author, or keyword...">
                    <button onclick="performSearch()" class="btn">Search</button>
                </div>
                <div id="loadingSpinner" class="loading" style="display: none;">üîÑ Searching books...</div>
                <div id="searchResults" class="books-grid"></div>
                <div id="searchPagination" class="pagination"></div>
            </div>
            <div id="libraryBooks" class="books-grid" style="display: none;">
                <div id="libraryPagination" class="pagination"></div>
            </div>
            <div id="borrowedBooks" class="books-grid" style="display: none;">
                <div id="borrowedPagination" class="pagination"></div>
            </div>
        </div>
    </div>
    <script src="/script.js"></script>
    <script>
        let currentTab = 'search';
        let currentSearchPage = 0;
        let currentLibraryPage = 0;
        let currentBorrowedPage = 0;
        const itemsPerPage = 12;

        async function performSearch(page = 0) {
            const query = document.getElementById('searchInput').value.trim();
            if (!query) {
                alert('‚ö†Ô∏è Please enter a search term');
                return;
            }
            currentSearchPage = page;
            document.getElementById('loadingSpinner').style.display = 'block';
            document.getElementById('searchResults').innerHTML = '';
            
            try {
                const response = await apiRequest(`/api/books/search?q=${encodeURIComponent(query)}&page=${page}&limit=${itemsPerPage}`);
                const data = response.data;
                document.getElementById('loadingSpinner').style.display = 'none';
                
                if (data.books && data.books.length > 0) {
                    displaySearchResults(data.books);
                    setupPagination('searchPagination', page, data.totalItems, 'performSearch');
                } else {
                    document.getElementById('searchResults').innerHTML = '<div class="no-results">üì≠ No books found. Try different keywords!</div>';
                }
            } catch (error) {
                document.getElementById('loadingSpinner').style.display = 'none';
                document.getElementById('searchResults').innerHTML = '<div class="no-results">üö´ Error searching books. Please try again later.</div>';
            }
        }

        function displaySearchResults(books) {
            const container = document.getElementById('searchResults');
            container.innerHTML = books.map(book => {
                const isAvailable = book.isAvailable;
                const statusText = isAvailable ? 'Available' : 'Unavailable';
                const statusClass = isAvailable ? 'status-available' : 'status-borrowed';
                const buttonText = isAvailable ? 'Request to Borrow' : 'Not Available';
                const buttonDisabled = !isAvailable ? 'disabled' : '';
                const buttonAction = isAvailable ? `borrowBook('${book.id}')` : '';

                return `
                    <div class="book-card">
                        <img src="${book.thumbnail || '/images/no-cover.png'}" alt="${book.title}" class="book-image">
                        <div class="book-info">
                            <h3 class="book-title">${book.title}</h3>
                            <p class="book-author">${Array.isArray(book.authors) ? book.authors.join(', ') : book.authors}</p>
                            <span class="book-status ${statusClass}">${statusText}</span>
                            <button class="btn" onclick="${buttonAction}" ${buttonDisabled}>${buttonText}</button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        async function borrowBook(bookId) {
            if (!confirm('Would you like to request to borrow this book? An administrator will need to approve your request.')) return;
            
            try {
                await apiRequest(`/api/books/borrow/${bookId}`, 'POST');
                alert('Borrow request submitted successfully! An administrator will review your request.');
                performSearch(currentSearchPage); // Refresh the current page
            } catch (error) {
                console.error('Borrow book error:', error);
                alert(error.message || 'Error submitting borrow request');
            }
        }

        async function displayBorrowedBooks(page = 0) {
            currentBorrowedPage = page;
            try {
                const response = await apiRequest(`/api/books/borrowed?page=${page}&limit=${itemsPerPage}`);
                const data = response.data;
                const container = document.getElementById('borrowedBooks');
                
                if (data.records && data.records.length > 0) {
                    container.innerHTML = data.records.map(record => `
                        <div class="book-card">
                            <img src="${record.thumbnail || '/images/no-cover.png'}" alt="${record.book_title}" class="book-image">
                            <div class="book-info">
                                <h3 class="book-title">${record.book_title}</h3>
                                <p class="book-author">Requested on: ${new Date(record.issue_date).toLocaleDateString()}</p>
                                <span class="book-status status-${record.status}">
                                    ${getRecordStatusText(record.status)}
                                </span>
                                ${getBorrowActionButton(record)}
                            </div>
                        </div>
                    `).join('');
                    setupPagination('borrowedPagination', page, data.totalItems, 'displayBorrowedBooks');
                } else {
                    container.innerHTML = '<div class="no-results">üìã You have not borrowed any books.</div>';
                }
            } catch (error) {
                console.error('Load borrowed books error:', error);
                document.getElementById('borrowedBooks').innerHTML = '<div class="no-results">üö´ Error loading borrowed books. Please try again later.</div>';
            }
        }

        function switchTab(tab, event) {
            currentTab = tab;
            document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
            if (event && event.target) event.target.classList.add('active');
            
            document.getElementById('searchTab').style.display = tab === 'search' ? 'block' : 'none';
            document.getElementById('libraryBooks').style.display = tab === 'library' ? 'grid' : 'none';
            document.getElementById('borrowedBooks').style.display = tab === 'borrowed' ? 'grid' : 'none';
            
            if (tab === 'library') displayLibraryBooks();
            if (tab === 'borrowed') displayBorrowedBooks();
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            if (!checkAuth()) return;
            switchTab('search');
        });
    </script>
</body>
</html>
